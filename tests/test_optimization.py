from unittest import TestCase

#from mulearn import *
from tests.optimization import GurobiSolver
import numpy as np
from tests.__init__ import *



class TestGurobiSolver(TestCase):

    def testCompute(self):

        s = GurobiSolver()

        xs = np.array([[0.2526861], [0.77908776], [0.5120937], [0.52646533], [0.01438627]])

        mus = np.array([0.63883086, 0.56515446, 0.99892903, 0.99488161, 0.17768801])

        c = 1

        #obtained from the original mulearn module
        chis_opt = [0.26334825774012194, 0.5651531004941153, -0.0010709737624955377,\
                    -0.00511839469274798, 0.17768801022078584]
        
        k = np.array([[1.        , 0.87062028, 0.96691358, 0.96321606, 0.9720059 ],
                      [0.87062028, 1.        , 0.96498481, 0.96859468, 0.74648169],
                      [0.96691358, 0.96498481, 1.        , 0.99989673, 0.88350675],
                      [0.96321606, 0.96859468, 0.99989673, 1.        , 0.87711911],
                      [0.9720059 , 0.74648169, 0.88350675, 0.87711911, 1.        ]])

        for chi, chi_opt in zip(s.solve(xs, mus, c, k), chis_opt):
            self.assertAlmostEqual(chi, chi_opt, places=5)


        self.assertEqual(GurobiSolver().__repr__(), 'GurobiSolver()')
        
        self.assertEqual(GurobiSolver(adjustment='auto').__repr__(), 'GurobiSolver(, adjustment=auto)')

        self.assertEqual(GurobiSolver(time_limit=1000).__repr__(), 'GurobiSolver(, time_limit=1000)')

        self.assertEqual(GurobiSolver(initial_values=(1,2,3,4,5)).__repr__(),\
                         'GurobiSolver(, initial_values=(1, 2, 3, 4, 5))')

        self.assertEqual(GurobiSolver(initial_values=(1,2,3,4,5), adjustment='auto').__repr__(),\
        'GurobiSolver(, adjustment=auto, initial_values=(1, 2, 3, 4, 5))')

        
        model = FuzzyInductor()

        
        xs = np.array([[0.05299316],[0.00831087],[0.52674217],[0.24869108],[0.02511512],
                       [0.16525169],[0.64176653],[0.11960495],[0.97941782],[0.16122519],
                       [0.41199312],[0.33561475],[0.47667467],[0.77403978],[0.69741396],
                       [0.07679596],[0.41836717],[0.09116998],[0.8647524 ],[0.79570139],
                       [0.6492061 ],[0.07771681],[0.01076581],[0.34327746],[0.58563821],
                       [0.28906288],[0.0132868 ],[0.43685648],[0.66744242],[0.6966816 ],
                       [0.08191166],[0.24680265],[0.38268386],[0.80547232],[0.43394755],
                       [0.80338255],[0.8945941 ],[0.36376442],[0.82855769],[0.17848898],
                       [0.13426014],[0.85804564],[0.20536965],[0.58801646],[0.14608102],
                       [0.1117827 ],[0.54979014],[0.02298591],[0.29125949],[0.16109822]])

        mus = np.array([0.00851467, 0.00313106, 0.98308714, 0.22170827, 0.00461257,
                        0.06906167, 0.61917405, 0.03170202, 0.00416038, 0.06473584,
                        0.83132226, 0.52490529, 0.98710673, 0.1667561 , 0.39472675,
                        0.01395511, 0.85304163, 0.01856181, 0.04186289, 0.12423366,
                        0.58801588, 0.01421668, 0.00331616, 0.55663332, 0.83951804,
                        0.34601392, 0.00351659, 0.90928211, 0.51235678, 0.39745347,
                        0.01546376, 0.21672692, 0.72016484, 0.10799205, 0.90116766,
                        0.11131967, 0.02438362, 0.6423038 , 0.07616806, 0.08496194,
                        0.04114879, 0.04699423, 0.1261214 , 0.83128883, 0.0504056 ,
                        0.02746675, 0.94258406, 0.00439489, 0.35370642, 0.06460311])

        chis_opt = np.array([ 0.00851467,  0.00313106, -0.01691286,  0.22170827,  0.00461257,
                              0.06906167, -0.38082595,  0.03170202,  0.00416038,  0.06473584,
                             -0.16867774,  0.07233336, -0.01289327,  0.1667561 ,  0.39472674,
                              0.01395511, -0.14695837,  0.01856181,  0.04186288,  0.12423366,
                             -0.41198412,  0.01421668,  0.00331616, -0.44336667, -0.16048196,
                              0.34601391,  0.00351659, -0.09071789,  0.43887946,  0.39745346,
                              0.01546376,  0.21672692, -0.27983515,  0.10799205, -0.09883234,
                              0.11131967,  0.02438362, -0.3576962 ,  0.07616806,  0.08496194,
                              0.04114879,  0.04699423,  0.1261214 , -0.16871117,  0.0504056 ,
                              0.02746675, -0.05741593,  0.00439489,  0.35370641,  0.06460311])

        model.fit(xs, mus)

        for chi, chi_opt in zip(model.chis_, chis_opt):
            self.assertAlmostEqual(chi, chi_opt, places=5)


        


        


        